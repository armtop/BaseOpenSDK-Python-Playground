# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.drive.v1.model.create_file_version_request import CreateFileVersionRequest
from baseopensdk.api.drive.v1.model.create_file_version_response import CreateFileVersionResponse
from baseopensdk.api.drive.v1.model.delete_file_version_request import DeleteFileVersionRequest
from baseopensdk.api.drive.v1.model.delete_file_version_response import DeleteFileVersionResponse
from baseopensdk.api.drive.v1.model.get_file_version_request import GetFileVersionRequest
from baseopensdk.api.drive.v1.model.get_file_version_response import GetFileVersionResponse
from baseopensdk.api.drive.v1.model.list_file_version_request import ListFileVersionRequest
from baseopensdk.api.drive.v1.model.list_file_version_response import ListFileVersionResponse


class FileVersion(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateFileVersionRequest, option: RequestOption = RequestOption()) -> CreateFileVersionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateFileVersionResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFileVersionResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteFileVersionRequest, option: RequestOption = RequestOption()) -> DeleteFileVersionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteFileVersionResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteFileVersionResponse)
        response.raw = resp

        return response

    def get(self, request: GetFileVersionRequest, option: RequestOption = RequestOption()) -> GetFileVersionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: GetFileVersionResponse = JSON.unmarshal(str(resp.content, UTF_8), GetFileVersionResponse)
        response.raw = resp

        return response

    def list(self, request: ListFileVersionRequest, option: RequestOption = RequestOption()) -> ListFileVersionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListFileVersionResponse = JSON.unmarshal(str(resp.content, UTF_8), ListFileVersionResponse)
        response.raw = resp

        return response

    
