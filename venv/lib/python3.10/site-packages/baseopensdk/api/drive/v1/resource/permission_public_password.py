# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.drive.v1.model.create_permission_public_password_request import CreatePermissionPublicPasswordRequest
from baseopensdk.api.drive.v1.model.create_permission_public_password_response import CreatePermissionPublicPasswordResponse
from baseopensdk.api.drive.v1.model.delete_permission_public_password_request import DeletePermissionPublicPasswordRequest
from baseopensdk.api.drive.v1.model.delete_permission_public_password_response import DeletePermissionPublicPasswordResponse
from baseopensdk.api.drive.v1.model.update_permission_public_password_request import UpdatePermissionPublicPasswordRequest
from baseopensdk.api.drive.v1.model.update_permission_public_password_response import UpdatePermissionPublicPasswordResponse


class PermissionPublicPassword(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreatePermissionPublicPasswordRequest, option: RequestOption = RequestOption()) -> CreatePermissionPublicPasswordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreatePermissionPublicPasswordResponse = JSON.unmarshal(str(resp.content, UTF_8), CreatePermissionPublicPasswordResponse)
        response.raw = resp

        return response

    def delete(self, request: DeletePermissionPublicPasswordRequest, option: RequestOption = RequestOption()) -> DeletePermissionPublicPasswordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeletePermissionPublicPasswordResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePermissionPublicPasswordResponse)
        response.raw = resp

        return response

    def update(self, request: UpdatePermissionPublicPasswordRequest, option: RequestOption = RequestOption()) -> UpdatePermissionPublicPasswordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: UpdatePermissionPublicPasswordResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdatePermissionPublicPasswordResponse)
        response.raw = resp

        return response

    
