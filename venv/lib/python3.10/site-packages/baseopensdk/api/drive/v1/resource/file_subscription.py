# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.drive.v1.model.create_file_subscription_request import CreateFileSubscriptionRequest
from baseopensdk.api.drive.v1.model.create_file_subscription_response import CreateFileSubscriptionResponse
from baseopensdk.api.drive.v1.model.get_file_subscription_request import GetFileSubscriptionRequest
from baseopensdk.api.drive.v1.model.get_file_subscription_response import GetFileSubscriptionResponse
from baseopensdk.api.drive.v1.model.patch_file_subscription_request import PatchFileSubscriptionRequest
from baseopensdk.api.drive.v1.model.patch_file_subscription_response import PatchFileSubscriptionResponse


class FileSubscription(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateFileSubscriptionRequest, option: RequestOption = RequestOption()) -> CreateFileSubscriptionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateFileSubscriptionResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFileSubscriptionResponse)
        response.raw = resp

        return response

    def get(self, request: GetFileSubscriptionRequest, option: RequestOption = RequestOption()) -> GetFileSubscriptionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: GetFileSubscriptionResponse = JSON.unmarshal(str(resp.content, UTF_8), GetFileSubscriptionResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchFileSubscriptionRequest, option: RequestOption = RequestOption()) -> PatchFileSubscriptionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: PatchFileSubscriptionResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchFileSubscriptionResponse)
        response.raw = resp

        return response

    
