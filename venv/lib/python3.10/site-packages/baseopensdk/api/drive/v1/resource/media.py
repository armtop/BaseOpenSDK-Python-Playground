# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.download_media_request import DownloadMediaRequest
from ..model.download_media_response import DownloadMediaResponse
from ..model.upload_all_media_request import UploadAllMediaRequest
from ..model.upload_all_media_response import UploadAllMediaResponse


class Media(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def download(self, request: DownloadMediaRequest, option: Optional[RequestOption] = None) -> DownloadMediaResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 处理二进制流
        if resp.status_code == 200:
            response: DownloadMediaResponse = DownloadMediaResponse({})
            response.code = 0
            response.raw = resp
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(response.raw.header)
            return response
        
        # 反序列化
        response: DownloadMediaResponse = JSON.unmarshal(str(resp.content, UTF_8), DownloadMediaResponse)
        response.raw = resp

        return response

    def upload_all(self, request: UploadAllMediaRequest, option: Optional[RequestOption] = None) -> UploadAllMediaResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 处理 form-data
        if request.body is not None:
            form_data = MultipartEncoder(Files.parse_form_data(request.body))
            option.headers[CONTENT_TYPE] = form_data.content_type
            request.body = form_data
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: UploadAllMediaResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadAllMediaResponse)
        response.raw = resp

        return response

    
