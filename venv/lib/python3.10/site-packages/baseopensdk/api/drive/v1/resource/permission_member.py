# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.drive.v1.model.auth_permission_member_request import AuthPermissionMemberRequest
from baseopensdk.api.drive.v1.model.auth_permission_member_response import AuthPermissionMemberResponse
from baseopensdk.api.drive.v1.model.create_permission_member_request import CreatePermissionMemberRequest
from baseopensdk.api.drive.v1.model.create_permission_member_response import CreatePermissionMemberResponse
from baseopensdk.api.drive.v1.model.delete_permission_member_request import DeletePermissionMemberRequest
from baseopensdk.api.drive.v1.model.delete_permission_member_response import DeletePermissionMemberResponse
from baseopensdk.api.drive.v1.model.list_permission_member_request import ListPermissionMemberRequest
from baseopensdk.api.drive.v1.model.list_permission_member_response import ListPermissionMemberResponse
from baseopensdk.api.drive.v1.model.transfer_owner_permission_member_request import TransferOwnerPermissionMemberRequest
from baseopensdk.api.drive.v1.model.transfer_owner_permission_member_response import TransferOwnerPermissionMemberResponse
from baseopensdk.api.drive.v1.model.update_permission_member_request import UpdatePermissionMemberRequest
from baseopensdk.api.drive.v1.model.update_permission_member_response import UpdatePermissionMemberResponse


class PermissionMember(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def auth(self, request: AuthPermissionMemberRequest, option: RequestOption = RequestOption()) -> AuthPermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: AuthPermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), AuthPermissionMemberResponse)
        response.raw = resp

        return response

    def create(self, request: CreatePermissionMemberRequest, option: RequestOption = RequestOption()) -> CreatePermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreatePermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), CreatePermissionMemberResponse)
        response.raw = resp

        return response

    def delete(self, request: DeletePermissionMemberRequest, option: RequestOption = RequestOption()) -> DeletePermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeletePermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePermissionMemberResponse)
        response.raw = resp

        return response

    def list(self, request: ListPermissionMemberRequest, option: RequestOption = RequestOption()) -> ListPermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListPermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), ListPermissionMemberResponse)
        response.raw = resp

        return response

    def transfer_owner(self, request: TransferOwnerPermissionMemberRequest, option: RequestOption = RequestOption()) -> TransferOwnerPermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: TransferOwnerPermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), TransferOwnerPermissionMemberResponse)
        response.raw = resp

        return response

    def update(self, request: UpdatePermissionMemberRequest, option: RequestOption = RequestOption()) -> UpdatePermissionMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: UpdatePermissionMemberResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdatePermissionMemberResponse)
        response.raw = resp

        return response

    
