# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.bitable.v1.model.create_app_table_view_request import CreateAppTableViewRequest
from baseopensdk.api.bitable.v1.model.create_app_table_view_response import CreateAppTableViewResponse
from baseopensdk.api.bitable.v1.model.delete_app_table_view_request import DeleteAppTableViewRequest
from baseopensdk.api.bitable.v1.model.delete_app_table_view_response import DeleteAppTableViewResponse
from baseopensdk.api.bitable.v1.model.get_app_table_view_request import GetAppTableViewRequest
from baseopensdk.api.bitable.v1.model.get_app_table_view_response import GetAppTableViewResponse
from baseopensdk.api.bitable.v1.model.list_app_table_view_request import ListAppTableViewRequest
from baseopensdk.api.bitable.v1.model.list_app_table_view_response import ListAppTableViewResponse
from baseopensdk.api.bitable.v1.model.patch_app_table_view_request import PatchAppTableViewRequest
from baseopensdk.api.bitable.v1.model.patch_app_table_view_response import PatchAppTableViewResponse


class AppTableView(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateAppTableViewRequest, option: RequestOption = RequestOption()) -> CreateAppTableViewResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateAppTableViewResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateAppTableViewResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteAppTableViewRequest, option: RequestOption = RequestOption()) -> DeleteAppTableViewResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteAppTableViewResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteAppTableViewResponse)
        response.raw = resp

        return response

    def get(self, request: GetAppTableViewRequest, option: RequestOption = RequestOption()) -> GetAppTableViewResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: GetAppTableViewResponse = JSON.unmarshal(str(resp.content, UTF_8), GetAppTableViewResponse)
        response.raw = resp

        return response

    def list(self, request: ListAppTableViewRequest, option: RequestOption = RequestOption()) -> ListAppTableViewResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListAppTableViewResponse = JSON.unmarshal(str(resp.content, UTF_8), ListAppTableViewResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchAppTableViewRequest, option: RequestOption = RequestOption()) -> PatchAppTableViewResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: PatchAppTableViewResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchAppTableViewResponse)
        response.raw = resp

        return response

    
