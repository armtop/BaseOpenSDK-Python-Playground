# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.bitable.v1.model.create_app_table_field_request import CreateAppTableFieldRequest
from baseopensdk.api.bitable.v1.model.create_app_table_field_response import CreateAppTableFieldResponse
from baseopensdk.api.bitable.v1.model.delete_app_table_field_request import DeleteAppTableFieldRequest
from baseopensdk.api.bitable.v1.model.delete_app_table_field_response import DeleteAppTableFieldResponse
from baseopensdk.api.bitable.v1.model.list_app_table_field_request import ListAppTableFieldRequest
from baseopensdk.api.bitable.v1.model.list_app_table_field_response import ListAppTableFieldResponse
from baseopensdk.api.bitable.v1.model.update_app_table_field_request import UpdateAppTableFieldRequest
from baseopensdk.api.bitable.v1.model.update_app_table_field_response import UpdateAppTableFieldResponse


class AppTableField(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateAppTableFieldRequest, option: RequestOption = RequestOption()) -> CreateAppTableFieldResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateAppTableFieldResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateAppTableFieldResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteAppTableFieldRequest, option: RequestOption = RequestOption()) -> DeleteAppTableFieldResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteAppTableFieldResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteAppTableFieldResponse)
        response.raw = resp

        return response

    def list(self, request: ListAppTableFieldRequest, option: RequestOption = RequestOption()) -> ListAppTableFieldResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListAppTableFieldResponse = JSON.unmarshal(str(resp.content, UTF_8), ListAppTableFieldResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateAppTableFieldRequest, option: RequestOption = RequestOption()) -> UpdateAppTableFieldResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: UpdateAppTableFieldResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateAppTableFieldResponse)
        response.raw = resp

        return response

    
