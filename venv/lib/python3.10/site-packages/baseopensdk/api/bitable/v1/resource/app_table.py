# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from baseopensdk.core.const import UTF_8, CONTENT_TYPE
from baseopensdk.core import JSON
from baseopensdk.core.token import verify
from baseopensdk.core.http import Transport
from baseopensdk.core.model import Config, RequestOption, RawResponse
from baseopensdk.core.utils import Files
from requests_toolbelt import MultipartEncoder
from baseopensdk.api.bitable.v1.model.batch_create_app_table_request import BatchCreateAppTableRequest
from baseopensdk.api.bitable.v1.model.batch_create_app_table_response import BatchCreateAppTableResponse
from baseopensdk.api.bitable.v1.model.batch_delete_app_table_request import BatchDeleteAppTableRequest
from baseopensdk.api.bitable.v1.model.batch_delete_app_table_response import BatchDeleteAppTableResponse
from baseopensdk.api.bitable.v1.model.create_app_table_request import CreateAppTableRequest
from baseopensdk.api.bitable.v1.model.create_app_table_response import CreateAppTableResponse
from baseopensdk.api.bitable.v1.model.delete_app_table_request import DeleteAppTableRequest
from baseopensdk.api.bitable.v1.model.delete_app_table_response import DeleteAppTableResponse
from baseopensdk.api.bitable.v1.model.list_app_table_request import ListAppTableRequest
from baseopensdk.api.bitable.v1.model.list_app_table_response import ListAppTableResponse
from baseopensdk.api.bitable.v1.model.patch_app_table_request import PatchAppTableRequest
from baseopensdk.api.bitable.v1.model.patch_app_table_response import PatchAppTableResponse


class AppTable(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_create(self, request: BatchCreateAppTableRequest, option: RequestOption = RequestOption()) -> BatchCreateAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: BatchCreateAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchCreateAppTableResponse)
        response.raw = resp

        return response

    def batch_delete(self, request: BatchDeleteAppTableRequest, option: RequestOption = RequestOption()) -> BatchDeleteAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: BatchDeleteAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchDeleteAppTableResponse)
        response.raw = resp

        return response

    def create(self, request: CreateAppTableRequest, option: RequestOption = RequestOption()) -> CreateAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateAppTableResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteAppTableRequest, option: RequestOption = RequestOption()) -> DeleteAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteAppTableResponse)
        response.raw = resp

        return response

    def list(self, request: ListAppTableRequest, option: RequestOption = RequestOption()) -> ListAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), ListAppTableResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchAppTableRequest, option: RequestOption = RequestOption()) -> PatchAppTableResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: PatchAppTableResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchAppTableResponse)
        response.raw = resp

        return response

    
